#include "opt_api.h"
#include <iostream>

constexpr unsigned int N_RUNS = 10;

typedef uint_t(*lut_fn)(uint_t);

size_t add_round_key(size_t v1, size_t v2) {
  [[maybe_unused]] bool v19 = 0;
  [[maybe_unused]] uint8_t v132 = 4;
  [[maybe_unused]] uint8_t v133 = 2;
  size_t v134 = v2 + 6;
  size_t v135 = v1 + 6;
  size_t v136 = lwe_trivial_encrypt(v19);
  size_t v137 = lwe_ops_mul_scalar(v136, v132);
  size_t v138 = lwe_ops_mul_scalar(v134, v133);
  size_t v139 = lwe_ops_add(v137, v138);
  size_t v140 = lwe_ops_add(v139, v135);
  size_t v141 = v2 + 7;
  size_t v142 = v1 + 7;
  size_t v143 = lwe_ops_mul_scalar(v141, v133);
  size_t v144 = lwe_ops_add(v137, v143);
  size_t v145 = lwe_ops_add(v144, v142);
  size_t v146 = v2 + 8;
  size_t v147 = v1 + 8;
  size_t v148 = lwe_ops_mul_scalar(v146, v133);
  size_t v149 = lwe_ops_add(v137, v148);
  size_t v150 = lwe_ops_add(v149, v147);
  size_t v151 = v2 + 9;
  size_t v152 = v1 + 9;
  size_t v153 = lwe_ops_mul_scalar(v151, v133);
  size_t v154 = lwe_ops_add(v137, v153);
  size_t v155 = lwe_ops_add(v154, v152);
  size_t v156 = v2 + 10;
  size_t v157 = v1 + 10;
  size_t v158 = lwe_ops_mul_scalar(v156, v133);
  size_t v159 = lwe_ops_add(v137, v158);
  size_t v160 = lwe_ops_add(v159, v157);
  size_t v161 = v2 + 11;
  size_t v162 = v1 + 11;
  size_t v163 = lwe_ops_mul_scalar(v161, v133);
  size_t v164 = lwe_ops_add(v137, v163);
  size_t v165 = lwe_ops_add(v164, v162);
  size_t v166 = v2 + 12;
  size_t v167 = v1 + 12;
  size_t v168 = lwe_ops_mul_scalar(v166, v133);
  size_t v169 = lwe_ops_add(v137, v168);
  size_t v170 = lwe_ops_add(v169, v167);
  size_t v171 = v2 + 13;
  size_t v172 = v1 + 13;
  size_t v173 = lwe_ops_mul_scalar(v171, v133);
  size_t v174 = lwe_ops_add(v137, v173);
  size_t v175 = lwe_ops_add(v174, v172);
  size_t v176 = v2 + 14;
  size_t v177 = v1 + 14;
  size_t v178 = lwe_ops_mul_scalar(v176, v133);
  size_t v179 = lwe_ops_add(v137, v178);
  size_t v180 = lwe_ops_add(v179, v177);
  size_t v181 = v2 + 15;
  size_t v182 = v1 + 15;
  size_t v183 = lwe_ops_mul_scalar(v181, v133);
  size_t v184 = lwe_ops_add(v137, v183);
  size_t v185 = lwe_ops_add(v184, v182);
  size_t v186 = v2 + 16;
  size_t v187 = v1 + 16;
  size_t v188 = lwe_ops_mul_scalar(v186, v133);
  size_t v189 = lwe_ops_add(v137, v188);
  size_t v190 = lwe_ops_add(v189, v187);
  size_t v191 = v2 + 17;
  size_t v192 = v1 + 17;
  size_t v193 = lwe_ops_mul_scalar(v191, v133);
  size_t v194 = lwe_ops_add(v137, v193);
  size_t v195 = lwe_ops_add(v194, v192);
  size_t v196 = v2 + 18;
  size_t v197 = v1 + 18;
  size_t v198 = lwe_ops_mul_scalar(v196, v133);
  size_t v199 = lwe_ops_add(v137, v198);
  size_t v200 = lwe_ops_add(v199, v197);
  size_t v201 = v2 + 19;
  size_t v202 = v1 + 19;
  size_t v203 = lwe_ops_mul_scalar(v201, v133);
  size_t v204 = lwe_ops_add(v137, v203);
  size_t v205 = lwe_ops_add(v204, v202);
  size_t v206 = v2 + 20;
  size_t v207 = v1 + 20;
  size_t v208 = lwe_ops_mul_scalar(v206, v133);
  size_t v209 = lwe_ops_add(v137, v208);
  size_t v210 = lwe_ops_add(v209, v207);
  size_t v211 = v2 + 21;
  size_t v212 = v1 + 21;
  size_t v213 = lwe_ops_mul_scalar(v211, v133);
  size_t v214 = lwe_ops_add(v137, v213);
  size_t v215 = lwe_ops_add(v214, v212);
  size_t v216 = v2 + 22;
  size_t v217 = v1 + 22;
  size_t v218 = lwe_ops_mul_scalar(v216, v133);
  size_t v219 = lwe_ops_add(v137, v218);
  size_t v220 = lwe_ops_add(v219, v217);
  size_t v221 = v2 + 23;
  size_t v222 = v1 + 23;
  size_t v223 = lwe_ops_mul_scalar(v221, v133);
  size_t v224 = lwe_ops_add(v137, v223);
  size_t v225 = lwe_ops_add(v224, v222);
  size_t v226 = v2 + 24;
  size_t v227 = v1 + 24;
  size_t v228 = lwe_ops_mul_scalar(v226, v133);
  size_t v229 = lwe_ops_add(v137, v228);
  size_t v230 = lwe_ops_add(v229, v227);
  size_t v231 = v2 + 25;
  size_t v232 = v1 + 25;
  size_t v233 = lwe_ops_mul_scalar(v231, v133);
  size_t v234 = lwe_ops_add(v137, v233);
  size_t v235 = lwe_ops_add(v234, v232);
  size_t v236 = v2 + 26;
  size_t v237 = v1 + 26;
  size_t v238 = lwe_ops_mul_scalar(v236, v133);
  size_t v239 = lwe_ops_add(v137, v238);
  size_t v240 = lwe_ops_add(v239, v237);
  size_t v241 = v2 + 27;
  size_t v242 = v1 + 27;
  size_t v243 = lwe_ops_mul_scalar(v241, v133);
  size_t v244 = lwe_ops_add(v137, v243);
  size_t v245 = lwe_ops_add(v244, v242);
  size_t v246 = v2 + 28;
  size_t v247 = v1 + 28;
  size_t v248 = lwe_ops_mul_scalar(v246, v133);
  size_t v249 = lwe_ops_add(v137, v248);
  size_t v250 = lwe_ops_add(v249, v247);
  size_t v251 = v2 + 29;
  size_t v252 = v1 + 29;
  size_t v253 = lwe_ops_mul_scalar(v251, v133);
  size_t v254 = lwe_ops_add(v137, v253);
  size_t v255 = lwe_ops_add(v254, v252);
  size_t v256 = v2 + 30;
  size_t v257 = v1 + 30;
  size_t v258 = lwe_ops_mul_scalar(v256, v133);
  size_t v259 = lwe_ops_add(v137, v258);
  size_t v260 = lwe_ops_add(v259, v257);
  size_t v261 = v2 + 31;
  size_t v262 = v1 + 31;
  size_t v263 = lwe_ops_mul_scalar(v261, v133);
  size_t v264 = lwe_ops_add(v137, v263);
  size_t v265 = lwe_ops_add(v264, v262);
  size_t v266 = v2 + 32;
  size_t v267 = v1 + 32;
  size_t v268 = lwe_ops_mul_scalar(v266, v133);
  size_t v269 = lwe_ops_add(v137, v268);
  size_t v270 = lwe_ops_add(v269, v267);
  size_t v271 = v2 + 33;
  size_t v272 = v1 + 33;
  size_t v273 = lwe_ops_mul_scalar(v271, v133);
  size_t v274 = lwe_ops_add(v137, v273);
  size_t v275 = lwe_ops_add(v274, v272);
  size_t v276 = v2 + 34;
  size_t v277 = v1 + 34;
  size_t v278 = lwe_ops_mul_scalar(v276, v133);
  size_t v279 = lwe_ops_add(v137, v278);
  size_t v280 = lwe_ops_add(v279, v277);
  size_t v281 = v2 + 35;
  size_t v282 = v1 + 35;
  size_t v283 = lwe_ops_mul_scalar(v281, v133);
  size_t v284 = lwe_ops_add(v137, v283);
  size_t v285 = lwe_ops_add(v284, v282);
  size_t v286 = v2 + 36;
  size_t v287 = v1 + 36;
  size_t v288 = lwe_ops_mul_scalar(v286, v133);
  size_t v289 = lwe_ops_add(v137, v288);
  size_t v290 = lwe_ops_add(v289, v287);
  size_t v291 = v2 + 37;
  size_t v292 = v1 + 37;
  size_t v293 = lwe_ops_mul_scalar(v291, v133);
  size_t v294 = lwe_ops_add(v137, v293);
  size_t v295 = lwe_ops_add(v294, v292);
  size_t v296 = v2 + 38;
  size_t v297 = v1 + 38;
  size_t v298 = lwe_ops_mul_scalar(v296, v133);
  size_t v299 = lwe_ops_add(v137, v298);
  size_t v300 = lwe_ops_add(v299, v297);
  size_t v301 = v2 + 39;
  size_t v302 = v1 + 39;
  size_t v303 = lwe_ops_mul_scalar(v301, v133);
  size_t v304 = lwe_ops_add(v137, v303);
  size_t v305 = lwe_ops_add(v304, v302);
  size_t v306 = v2 + 40;
  size_t v307 = v1 + 40;
  size_t v308 = lwe_ops_mul_scalar(v306, v133);
  size_t v309 = lwe_ops_add(v137, v308);
  size_t v310 = lwe_ops_add(v309, v307);
  size_t v311 = v2 + 41;
  size_t v312 = v1 + 41;
  size_t v313 = lwe_ops_mul_scalar(v311, v133);
  size_t v314 = lwe_ops_add(v137, v313);
  size_t v315 = lwe_ops_add(v314, v312);
  size_t v316 = v2 + 42;
  size_t v317 = v1 + 42;
  size_t v318 = lwe_ops_mul_scalar(v316, v133);
  size_t v319 = lwe_ops_add(v137, v318);
  size_t v320 = lwe_ops_add(v319, v317);
  size_t v321 = v2 + 43;
  size_t v322 = v1 + 43;
  size_t v323 = lwe_ops_mul_scalar(v321, v133);
  size_t v324 = lwe_ops_add(v137, v323);
  size_t v325 = lwe_ops_add(v324, v322);
  size_t v326 = v2 + 44;
  size_t v327 = v1 + 44;
  size_t v328 = lwe_ops_mul_scalar(v326, v133);
  size_t v329 = lwe_ops_add(v137, v328);
  size_t v330 = lwe_ops_add(v329, v327);
  size_t v331 = v2 + 45;
  size_t v332 = v1 + 45;
  size_t v333 = lwe_ops_mul_scalar(v331, v133);
  size_t v334 = lwe_ops_add(v137, v333);
  size_t v335 = lwe_ops_add(v334, v332);
  size_t v336 = v2 + 46;
  size_t v337 = v1 + 46;
  size_t v338 = lwe_ops_mul_scalar(v336, v133);
  size_t v339 = lwe_ops_add(v137, v338);
  size_t v340 = lwe_ops_add(v339, v337);
  size_t v341 = v2 + 47;
  size_t v342 = v1 + 47;
  size_t v343 = lwe_ops_mul_scalar(v341, v133);
  size_t v344 = lwe_ops_add(v137, v343);
  size_t v345 = lwe_ops_add(v344, v342);
  size_t v346 = v2 + 48;
  size_t v347 = v1 + 48;
  size_t v348 = lwe_ops_mul_scalar(v346, v133);
  size_t v349 = lwe_ops_add(v137, v348);
  size_t v350 = lwe_ops_add(v349, v347);
  size_t v351 = v2 + 49;
  size_t v352 = v1 + 49;
  size_t v353 = lwe_ops_mul_scalar(v351, v133);
  size_t v354 = lwe_ops_add(v137, v353);
  size_t v355 = lwe_ops_add(v354, v352);
  size_t v356 = v2 + 50;
  size_t v357 = v1 + 50;
  size_t v358 = lwe_ops_mul_scalar(v356, v133);
  size_t v359 = lwe_ops_add(v137, v358);
  size_t v360 = lwe_ops_add(v359, v357);
  size_t v361 = v2 + 51;
  size_t v362 = v1 + 51;
  size_t v363 = lwe_ops_mul_scalar(v361, v133);
  size_t v364 = lwe_ops_add(v137, v363);
  size_t v365 = lwe_ops_add(v364, v362);
  size_t v366 = v2 + 52;
  size_t v367 = v1 + 52;
  size_t v368 = lwe_ops_mul_scalar(v366, v133);
  size_t v369 = lwe_ops_add(v137, v368);
  size_t v370 = lwe_ops_add(v369, v367);
  size_t v371 = v2 + 53;
  size_t v372 = v1 + 53;
  size_t v373 = lwe_ops_mul_scalar(v371, v133);
  size_t v374 = lwe_ops_add(v137, v373);
  size_t v375 = lwe_ops_add(v374, v372);
  size_t v376 = v2 + 54;
  size_t v377 = v1 + 54;
  size_t v378 = lwe_ops_mul_scalar(v376, v133);
  size_t v379 = lwe_ops_add(v137, v378);
  size_t v380 = lwe_ops_add(v379, v377);
  size_t v381 = v2 + 55;
  size_t v382 = v1 + 55;
  size_t v383 = lwe_ops_mul_scalar(v381, v133);
  size_t v384 = lwe_ops_add(v137, v383);
  size_t v385 = lwe_ops_add(v384, v382);
  size_t v386 = v2 + 56;
  size_t v387 = v1 + 56;
  size_t v388 = lwe_ops_mul_scalar(v386, v133);
  size_t v389 = lwe_ops_add(v137, v388);
  size_t v390 = lwe_ops_add(v389, v387);
  size_t v391 = v2 + 57;
  size_t v392 = v1 + 57;
  size_t v393 = lwe_ops_mul_scalar(v391, v133);
  size_t v394 = lwe_ops_add(v137, v393);
  size_t v395 = lwe_ops_add(v394, v392);
  size_t v396 = v2 + 58;
  size_t v397 = v1 + 58;
  size_t v398 = lwe_ops_mul_scalar(v396, v133);
  size_t v399 = lwe_ops_add(v137, v398);
  size_t v400 = lwe_ops_add(v399, v397);
  size_t v401 = v2 + 59;
  size_t v402 = v1 + 59;
  size_t v403 = lwe_ops_mul_scalar(v401, v133);
  size_t v404 = lwe_ops_add(v137, v403);
  size_t v405 = lwe_ops_add(v404, v402);
  size_t v406 = v2 + 60;
  size_t v407 = v1 + 60;
  size_t v408 = lwe_ops_mul_scalar(v406, v133);
  size_t v409 = lwe_ops_add(v137, v408);
  size_t v410 = lwe_ops_add(v409, v407);
  size_t v411 = v2 + 61;
  size_t v412 = v1 + 61;
  size_t v413 = lwe_ops_mul_scalar(v411, v133);
  size_t v414 = lwe_ops_add(v137, v413);
  size_t v415 = lwe_ops_add(v414, v412);
  size_t v416 = v2 + 62;
  size_t v417 = v1 + 62;
  size_t v418 = lwe_ops_mul_scalar(v416, v133);
  size_t v419 = lwe_ops_add(v137, v418);
  size_t v420 = lwe_ops_add(v419, v417);
  size_t v421 = v2 + 63;
  size_t v422 = v1 + 63;
  size_t v423 = lwe_ops_mul_scalar(v421, v133);
  size_t v424 = lwe_ops_add(v137, v423);
  size_t v425 = lwe_ops_add(v424, v422);
  size_t v426 = v2 + 64;
  size_t v427 = v1 + 64;
  size_t v428 = lwe_ops_mul_scalar(v426, v133);
  size_t v429 = lwe_ops_add(v137, v428);
  size_t v430 = lwe_ops_add(v429, v427);
  size_t v431 = v2 + 65;
  size_t v432 = v1 + 65;
  size_t v433 = lwe_ops_mul_scalar(v431, v133);
  size_t v434 = lwe_ops_add(v137, v433);
  size_t v435 = lwe_ops_add(v434, v432);
  size_t v436 = v2 + 66;
  size_t v437 = v1 + 66;
  size_t v438 = lwe_ops_mul_scalar(v436, v133);
  size_t v439 = lwe_ops_add(v137, v438);
  size_t v440 = lwe_ops_add(v439, v437);
  size_t v441 = v2 + 67;
  size_t v442 = v1 + 67;
  size_t v443 = lwe_ops_mul_scalar(v441, v133);
  size_t v444 = lwe_ops_add(v137, v443);
  size_t v445 = lwe_ops_add(v444, v442);
  size_t v446 = v2 + 68;
  size_t v447 = v1 + 68;
  size_t v448 = lwe_ops_mul_scalar(v446, v133);
  size_t v449 = lwe_ops_add(v137, v448);
  size_t v450 = lwe_ops_add(v449, v447);
  size_t v451 = v2 + 69;
  size_t v452 = v1 + 69;
  size_t v453 = lwe_ops_mul_scalar(v451, v133);
  size_t v454 = lwe_ops_add(v137, v453);
  size_t v455 = lwe_ops_add(v454, v452);
  size_t v456 = v2 + 70;
  size_t v457 = v1 + 70;
  size_t v458 = lwe_ops_mul_scalar(v456, v133);
  size_t v459 = lwe_ops_add(v137, v458);
  size_t v460 = lwe_ops_add(v459, v457);
  size_t v461 = v2 + 71;
  size_t v462 = v1 + 71;
  size_t v463 = lwe_ops_mul_scalar(v461, v133);
  size_t v464 = lwe_ops_add(v137, v463);
  size_t v465 = lwe_ops_add(v464, v462);
  size_t v466 = v2 + 72;
  size_t v467 = v1 + 72;
  size_t v468 = lwe_ops_mul_scalar(v466, v133);
  size_t v469 = lwe_ops_add(v137, v468);
  size_t v470 = lwe_ops_add(v469, v467);
  size_t v471 = v2 + 73;
  size_t v472 = v1 + 73;
  size_t v473 = lwe_ops_mul_scalar(v471, v133);
  size_t v474 = lwe_ops_add(v137, v473);
  size_t v475 = lwe_ops_add(v474, v472);
  size_t v476 = v2 + 74;
  size_t v477 = v1 + 74;
  size_t v478 = lwe_ops_mul_scalar(v476, v133);
  size_t v479 = lwe_ops_add(v137, v478);
  size_t v480 = lwe_ops_add(v479, v477);
  size_t v481 = v2 + 75;
  size_t v482 = v1 + 75;
  size_t v483 = lwe_ops_mul_scalar(v481, v133);
  size_t v484 = lwe_ops_add(v137, v483);
  size_t v485 = lwe_ops_add(v484, v482);
  size_t v486 = v2 + 76;
  size_t v487 = v1 + 76;
  size_t v488 = lwe_ops_mul_scalar(v486, v133);
  size_t v489 = lwe_ops_add(v137, v488);
  size_t v490 = lwe_ops_add(v489, v487);
  size_t v491 = v2 + 77;
  size_t v492 = v1 + 77;
  size_t v493 = lwe_ops_mul_scalar(v491, v133);
  size_t v494 = lwe_ops_add(v137, v493);
  size_t v495 = lwe_ops_add(v494, v492);
  size_t v496 = v2 + 78;
  size_t v497 = v1 + 78;
  size_t v498 = lwe_ops_mul_scalar(v496, v133);
  size_t v499 = lwe_ops_add(v137, v498);
  size_t v500 = lwe_ops_add(v499, v497);
  size_t v501 = v2 + 79;
  size_t v502 = v1 + 79;
  size_t v503 = lwe_ops_mul_scalar(v501, v133);
  size_t v504 = lwe_ops_add(v137, v503);
  size_t v505 = lwe_ops_add(v504, v502);
  size_t v506 = v2 + 80;
  size_t v507 = v1 + 80;
  size_t v508 = lwe_ops_mul_scalar(v506, v133);
  size_t v509 = lwe_ops_add(v137, v508);
  size_t v510 = lwe_ops_add(v509, v507);
  size_t v511 = v2 + 81;
  size_t v512 = v1 + 81;
  size_t v513 = lwe_ops_mul_scalar(v511, v133);
  size_t v514 = lwe_ops_add(v137, v513);
  size_t v515 = lwe_ops_add(v514, v512);
  size_t v516 = v2 + 82;
  size_t v517 = v1 + 82;
  size_t v518 = lwe_ops_mul_scalar(v516, v133);
  size_t v519 = lwe_ops_add(v137, v518);
  size_t v520 = lwe_ops_add(v519, v517);
  size_t v521 = v2 + 83;
  size_t v522 = v1 + 83;
  size_t v523 = lwe_ops_mul_scalar(v521, v133);
  size_t v524 = lwe_ops_add(v137, v523);
  size_t v525 = lwe_ops_add(v524, v522);
  size_t v526 = v2 + 84;
  size_t v527 = v1 + 84;
  size_t v528 = lwe_ops_mul_scalar(v526, v133);
  size_t v529 = lwe_ops_add(v137, v528);
  size_t v530 = lwe_ops_add(v529, v527);
  size_t v531 = v2 + 85;
  size_t v532 = v1 + 85;
  size_t v533 = lwe_ops_mul_scalar(v531, v133);
  size_t v534 = lwe_ops_add(v137, v533);
  size_t v535 = lwe_ops_add(v534, v532);
  size_t v536 = v2 + 86;
  size_t v537 = v1 + 86;
  size_t v538 = lwe_ops_mul_scalar(v536, v133);
  size_t v539 = lwe_ops_add(v137, v538);
  size_t v540 = lwe_ops_add(v539, v537);
  size_t v541 = v2 + 87;
  size_t v542 = v1 + 87;
  size_t v543 = lwe_ops_mul_scalar(v541, v133);
  size_t v544 = lwe_ops_add(v137, v543);
  size_t v545 = lwe_ops_add(v544, v542);
  size_t v546 = v2 + 88;
  size_t v547 = v1 + 88;
  size_t v548 = lwe_ops_mul_scalar(v546, v133);
  size_t v549 = lwe_ops_add(v137, v548);
  size_t v550 = lwe_ops_add(v549, v547);
  size_t v551 = v2 + 89;
  size_t v552 = v1 + 89;
  size_t v553 = lwe_ops_mul_scalar(v551, v133);
  size_t v554 = lwe_ops_add(v137, v553);
  size_t v555 = lwe_ops_add(v554, v552);
  size_t v556 = v2 + 90;
  size_t v557 = v1 + 90;
  size_t v558 = lwe_ops_mul_scalar(v556, v133);
  size_t v559 = lwe_ops_add(v137, v558);
  size_t v560 = lwe_ops_add(v559, v557);
  size_t v561 = v2 + 91;
  size_t v562 = v1 + 91;
  size_t v563 = lwe_ops_mul_scalar(v561, v133);
  size_t v564 = lwe_ops_add(v137, v563);
  size_t v565 = lwe_ops_add(v564, v562);
  size_t v566 = v2 + 92;
  size_t v567 = v1 + 92;
  size_t v568 = lwe_ops_mul_scalar(v566, v133);
  size_t v569 = lwe_ops_add(v137, v568);
  size_t v570 = lwe_ops_add(v569, v567);
  size_t v571 = v2 + 93;
  size_t v572 = v1 + 93;
  size_t v573 = lwe_ops_mul_scalar(v571, v133);
  size_t v574 = lwe_ops_add(v137, v573);
  size_t v575 = lwe_ops_add(v574, v572);
  size_t v576 = v2 + 94;
  size_t v577 = v1 + 94;
  size_t v578 = lwe_ops_mul_scalar(v576, v133);
  size_t v579 = lwe_ops_add(v137, v578);
  size_t v580 = lwe_ops_add(v579, v577);
  size_t v581 = v2 + 95;
  size_t v582 = v1 + 95;
  size_t v583 = lwe_ops_mul_scalar(v581, v133);
  size_t v584 = lwe_ops_add(v137, v583);
  size_t v585 = lwe_ops_add(v584, v582);
  size_t v586 = v2 + 96;
  size_t v587 = v1 + 96;
  size_t v588 = lwe_ops_mul_scalar(v586, v133);
  size_t v589 = lwe_ops_add(v137, v588);
  size_t v590 = lwe_ops_add(v589, v587);
  size_t v591 = v2 + 97;
  size_t v592 = v1 + 97;
  size_t v593 = lwe_ops_mul_scalar(v591, v133);
  size_t v594 = lwe_ops_add(v137, v593);
  size_t v595 = lwe_ops_add(v594, v592);
  size_t v596 = v2 + 98;
  size_t v597 = v1 + 98;
  size_t v598 = lwe_ops_mul_scalar(v596, v133);
  size_t v599 = lwe_ops_add(v137, v598);
  size_t v600 = lwe_ops_add(v599, v597);
  size_t v601 = v2 + 99;
  size_t v602 = v1 + 99;
  size_t v603 = lwe_ops_mul_scalar(v601, v133);
  size_t v604 = lwe_ops_add(v137, v603);
  size_t v605 = lwe_ops_add(v604, v602);
  size_t v606 = v2 + 100;
  size_t v607 = v1 + 100;
  size_t v608 = lwe_ops_mul_scalar(v606, v133);
  size_t v609 = lwe_ops_add(v137, v608);
  size_t v610 = lwe_ops_add(v609, v607);
  size_t v611 = v2 + 101;
  size_t v612 = v1 + 101;
  size_t v613 = lwe_ops_mul_scalar(v611, v133);
  size_t v614 = lwe_ops_add(v137, v613);
  size_t v615 = lwe_ops_add(v614, v612);
  size_t v616 = v2 + 102;
  size_t v617 = v1 + 102;
  size_t v618 = lwe_ops_mul_scalar(v616, v133);
  size_t v619 = lwe_ops_add(v137, v618);
  size_t v620 = lwe_ops_add(v619, v617);
  size_t v621 = v2 + 103;
  size_t v622 = v1 + 103;
  size_t v623 = lwe_ops_mul_scalar(v621, v133);
  size_t v624 = lwe_ops_add(v137, v623);
  size_t v625 = lwe_ops_add(v624, v622);
  size_t v626 = v2 + 104;
  size_t v627 = v1 + 104;
  size_t v628 = lwe_ops_mul_scalar(v626, v133);
  size_t v629 = lwe_ops_add(v137, v628);
  size_t v630 = lwe_ops_add(v629, v627);
  size_t v631 = v2 + 105;
  size_t v632 = v1 + 105;
  size_t v633 = lwe_ops_mul_scalar(v631, v133);
  size_t v634 = lwe_ops_add(v137, v633);
  size_t v635 = lwe_ops_add(v634, v632);
  size_t v636 = v2 + 106;
  size_t v637 = v1 + 106;
  size_t v638 = lwe_ops_mul_scalar(v636, v133);
  size_t v639 = lwe_ops_add(v137, v638);
  size_t v640 = lwe_ops_add(v639, v637);
  size_t v641 = v2 + 107;
  size_t v642 = v1 + 107;
  size_t v643 = lwe_ops_mul_scalar(v641, v133);
  size_t v644 = lwe_ops_add(v137, v643);
  size_t v645 = lwe_ops_add(v644, v642);
  size_t v646 = v2 + 108;
  size_t v647 = v1 + 108;
  size_t v648 = lwe_ops_mul_scalar(v646, v133);
  size_t v649 = lwe_ops_add(v137, v648);
  size_t v650 = lwe_ops_add(v649, v647);
  size_t v651 = v2 + 109;
  size_t v652 = v1 + 109;
  size_t v653 = lwe_ops_mul_scalar(v651, v133);
  size_t v654 = lwe_ops_add(v137, v653);
  size_t v655 = lwe_ops_add(v654, v652);
  size_t v656 = v2 + 110;
  size_t v657 = v1 + 110;
  size_t v658 = lwe_ops_mul_scalar(v656, v133);
  size_t v659 = lwe_ops_add(v137, v658);
  size_t v660 = lwe_ops_add(v659, v657);
  size_t v661 = v2 + 111;
  size_t v662 = v1 + 111;
  size_t v663 = lwe_ops_mul_scalar(v661, v133);
  size_t v664 = lwe_ops_add(v137, v663);
  size_t v665 = lwe_ops_add(v664, v662);
  size_t v666 = v2 + 112;
  size_t v667 = v1 + 112;
  size_t v668 = lwe_ops_mul_scalar(v666, v133);
  size_t v669 = lwe_ops_add(v137, v668);
  size_t v670 = lwe_ops_add(v669, v667);
  size_t v671 = v2 + 113;
  size_t v672 = v1 + 113;
  size_t v673 = lwe_ops_mul_scalar(v671, v133);
  size_t v674 = lwe_ops_add(v137, v673);
  size_t v675 = lwe_ops_add(v674, v672);
  size_t v676 = v2 + 114;
  size_t v677 = v1 + 114;
  size_t v678 = lwe_ops_mul_scalar(v676, v133);
  size_t v679 = lwe_ops_add(v137, v678);
  size_t v680 = lwe_ops_add(v679, v677);
  size_t v681 = v2 + 115;
  size_t v682 = v1 + 115;
  size_t v683 = lwe_ops_mul_scalar(v681, v133);
  size_t v684 = lwe_ops_add(v137, v683);
  size_t v685 = lwe_ops_add(v684, v682);
  size_t v686 = v2 + 116;
  size_t v687 = v1 + 116;
  size_t v688 = lwe_ops_mul_scalar(v686, v133);
  size_t v689 = lwe_ops_add(v137, v688);
  size_t v690 = lwe_ops_add(v689, v687);
  size_t v691 = v2 + 117;
  size_t v692 = v1 + 117;
  size_t v693 = lwe_ops_mul_scalar(v691, v133);
  size_t v694 = lwe_ops_add(v137, v693);
  size_t v695 = lwe_ops_add(v694, v692);
  size_t v696 = v2 + 118;
  size_t v697 = v1 + 118;
  size_t v698 = lwe_ops_mul_scalar(v696, v133);
  size_t v699 = lwe_ops_add(v137, v698);
  size_t v700 = lwe_ops_add(v699, v697);
  size_t v701 = v2 + 119;
  size_t v702 = v1 + 119;
  size_t v703 = lwe_ops_mul_scalar(v701, v133);
  size_t v704 = lwe_ops_add(v137, v703);
  size_t v705 = lwe_ops_add(v704, v702);
  size_t v706 = v2 + 120;
  size_t v707 = v1 + 120;
  size_t v708 = lwe_ops_mul_scalar(v706, v133);
  size_t v709 = lwe_ops_add(v137, v708);
  size_t v710 = lwe_ops_add(v709, v707);
  size_t v711 = v2 + 121;
  size_t v712 = v1 + 121;
  size_t v713 = lwe_ops_mul_scalar(v711, v133);
  size_t v714 = lwe_ops_add(v137, v713);
  size_t v715 = lwe_ops_add(v714, v712);
  size_t v716 = v2 + 122;
  size_t v717 = v1 + 122;
  size_t v718 = lwe_ops_mul_scalar(v716, v133);
  size_t v719 = lwe_ops_add(v137, v718);
  size_t v720 = lwe_ops_add(v719, v717);
  size_t v721 = v2 + 123;
  size_t v722 = v1 + 123;
  size_t v723 = lwe_ops_mul_scalar(v721, v133);
  size_t v724 = lwe_ops_add(v137, v723);
  size_t v725 = lwe_ops_add(v724, v722);
  size_t v726 = v2 + 124;
  size_t v727 = v1 + 124;
  size_t v728 = lwe_ops_mul_scalar(v726, v133);
  size_t v729 = lwe_ops_add(v137, v728);
  size_t v730 = lwe_ops_add(v729, v727);
  size_t v731 = v2 + 125;
  size_t v732 = v1 + 125;
  size_t v733 = lwe_ops_mul_scalar(v731, v133);
  size_t v734 = lwe_ops_add(v137, v733);
  size_t v735 = lwe_ops_add(v734, v732);
  size_t v736 = v2 + 126;
  size_t v737 = v1 + 126;
  size_t v738 = lwe_ops_mul_scalar(v736, v133);
  size_t v739 = lwe_ops_add(v137, v738);
  size_t v740 = lwe_ops_add(v739, v737);
  size_t v741 = v2 + 127;
  size_t v742 = v1 + 127;
  size_t v743 = lwe_ops_mul_scalar(v741, v133);
  size_t v744 = lwe_ops_add(v137, v743);
  size_t v745 = lwe_ops_add(v744, v742);
  size_t v746 = v2 + 0;
  size_t v747 = v1 + 0;
  size_t v748 = lwe_ops_mul_scalar(v746, v133);
  size_t v749 = lwe_ops_add(v137, v748);
  size_t v750 = lwe_ops_add(v749, v747);
  size_t v751 = v2 + 1;
  size_t v752 = v1 + 1;
  size_t v753 = lwe_ops_mul_scalar(v751, v133);
  size_t v754 = lwe_ops_add(v137, v753);
  size_t v755 = lwe_ops_add(v754, v752);
  size_t v756 = v2 + 2;
  size_t v757 = v1 + 2;
  size_t v758 = lwe_ops_mul_scalar(v756, v133);
  size_t v759 = lwe_ops_add(v137, v758);
  size_t v760 = lwe_ops_add(v759, v757);
  size_t v761 = v2 + 3;
  size_t v762 = v1 + 3;
  size_t v763 = lwe_ops_mul_scalar(v761, v133);
  size_t v764 = lwe_ops_add(v137, v763);
  size_t v765 = lwe_ops_add(v764, v762);
  size_t v766 = v2 + 4;
  size_t v767 = v1 + 4;
  size_t v768 = lwe_ops_mul_scalar(v766, v133);
  size_t v769 = lwe_ops_add(v137, v768);
  size_t v770 = lwe_ops_add(v769, v767);
  size_t v771 = v2 + 5;
  size_t v772 = v1 + 5;
  size_t v773 = lwe_ops_mul_scalar(v771, v133);
  size_t v774 = lwe_ops_add(v137, v773);
  size_t v775 = lwe_ops_add(v774, v772);
  const size_t batch_v776[128] = {v615, v610, v605, v600, v595, v590, v585, v580, v575, v570, v565, v560, v555, v550, v545, v540, v535, v530, v525, v520, v515, v510, v505, v500, v495, v490, v475, v470, v775, v770, v765, v760, v755, v750, v745, v740, v635, v630, v735, v730, v725, v720, v715, v710, v705, v700, v695, v690, v685, v680, v675, v670, v665, v660, v655, v650, v645, v640, v480, v485, v140, v145, v240, v245, v250, v255, v260, v265, v270, v275, v280, v285, v290, v295, v300, v305, v400, v405, v410, v415, v420, v425, v430, v435, v440, v445, v450, v455, v460, v465, v150, v155, v160, v165, v170, v175, v180, v185, v190, v195, v200, v205, v210, v215, v220, v225, v230, v235, v395, v390, v385, v380, v375, v370, v365, v360, v355, v350, v345, v340, v335, v330, v325, v320, v315, v310, v625, v620};
  size_t v776 = lwe_create_batch(batch_v776, 128);
  const size_t v777 = rlwe_gen_lut([](uint_t x) -> uint_t { return static_cast<uint_t>((6 >> static_cast<uint8_t>(x)) & 1); });
  size_t v778 = device_multi_cmux_pbs_b(v776, 128, v777);
  size_t v779 = v778 + 0;
  size_t v780 = v778 + 1;
  size_t v781 = v778 + 2;
  size_t v782 = v778 + 3;
  size_t v783 = v778 + 4;
  size_t v784 = v778 + 5;
  size_t v785 = v778 + 6;
  size_t v786 = v778 + 7;
  size_t v787 = v778 + 8;
  size_t v788 = v778 + 9;
  size_t v789 = v778 + 10;
  size_t v790 = v778 + 11;
  size_t v791 = v778 + 12;
  size_t v792 = v778 + 13;
  size_t v793 = v778 + 14;
  size_t v794 = v778 + 15;
  size_t v795 = v778 + 16;
  size_t v796 = v778 + 17;
  size_t v797 = v778 + 18;
  size_t v798 = v778 + 19;
  size_t v799 = v778 + 20;
  size_t v800 = v778 + 21;
  size_t v801 = v778 + 22;
  size_t v802 = v778 + 23;
  size_t v803 = v778 + 24;
  size_t v804 = v778 + 25;
  size_t v805 = v778 + 26;
  size_t v806 = v778 + 27;
  size_t v807 = v778 + 28;
  size_t v808 = v778 + 29;
  size_t v809 = v778 + 30;
  size_t v810 = v778 + 31;
  size_t v811 = v778 + 32;
  size_t v812 = v778 + 33;
  size_t v813 = v778 + 34;
  size_t v814 = v778 + 35;
  size_t v815 = v778 + 36;
  size_t v816 = v778 + 37;
  size_t v817 = v778 + 38;
  size_t v818 = v778 + 39;
  size_t v819 = v778 + 40;
  size_t v820 = v778 + 41;
  size_t v821 = v778 + 42;
  size_t v822 = v778 + 43;
  size_t v823 = v778 + 44;
  size_t v824 = v778 + 45;
  size_t v825 = v778 + 46;
  size_t v826 = v778 + 47;
  size_t v827 = v778 + 48;
  size_t v828 = v778 + 49;
  size_t v829 = v778 + 50;
  size_t v830 = v778 + 51;
  size_t v831 = v778 + 52;
  size_t v832 = v778 + 53;
  size_t v833 = v778 + 54;
  size_t v834 = v778 + 55;
  size_t v835 = v778 + 56;
  size_t v836 = v778 + 57;
  size_t v837 = v778 + 58;
  size_t v838 = v778 + 59;
  size_t v839 = v778 + 60;
  size_t v840 = v778 + 61;
  size_t v841 = v778 + 62;
  size_t v842 = v778 + 63;
  size_t v843 = v778 + 64;
  size_t v844 = v778 + 65;
  size_t v845 = v778 + 66;
  size_t v846 = v778 + 67;
  size_t v847 = v778 + 68;
  size_t v848 = v778 + 69;
  size_t v849 = v778 + 70;
  size_t v850 = v778 + 71;
  size_t v851 = v778 + 72;
  size_t v852 = v778 + 73;
  size_t v853 = v778 + 74;
  size_t v854 = v778 + 75;
  size_t v855 = v778 + 76;
  size_t v856 = v778 + 77;
  size_t v857 = v778 + 78;
  size_t v858 = v778 + 79;
  size_t v859 = v778 + 80;
  size_t v860 = v778 + 81;
  size_t v861 = v778 + 82;
  size_t v862 = v778 + 83;
  size_t v863 = v778 + 84;
  size_t v864 = v778 + 85;
  size_t v865 = v778 + 86;
  size_t v866 = v778 + 87;
  size_t v867 = v778 + 88;
  size_t v868 = v778 + 89;
  size_t v869 = v778 + 90;
  size_t v870 = v778 + 91;
  size_t v871 = v778 + 92;
  size_t v872 = v778 + 93;
  size_t v873 = v778 + 94;
  size_t v874 = v778 + 95;
  size_t v875 = v778 + 96;
  size_t v876 = v778 + 97;
  size_t v877 = v778 + 98;
  size_t v878 = v778 + 99;
  size_t v879 = v778 + 100;
  size_t v880 = v778 + 101;
  size_t v881 = v778 + 102;
  size_t v882 = v778 + 103;
  size_t v883 = v778 + 104;
  size_t v884 = v778 + 105;
  size_t v885 = v778 + 106;
  size_t v886 = v778 + 107;
  size_t v887 = v778 + 108;
  size_t v888 = v778 + 109;
  size_t v889 = v778 + 110;
  size_t v890 = v778 + 111;
  size_t v891 = v778 + 112;
  size_t v892 = v778 + 113;
  size_t v893 = v778 + 114;
  size_t v894 = v778 + 115;
  size_t v895 = v778 + 116;
  size_t v896 = v778 + 117;
  size_t v897 = v778 + 118;
  size_t v898 = v778 + 119;
  size_t v899 = v778 + 120;
  size_t v900 = v778 + 121;
  size_t v901 = v778 + 122;
  size_t v902 = v778 + 123;
  size_t v903 = v778 + 124;
  size_t v904 = v778 + 125;
  size_t v905 = v778 + 126;
  size_t v906 = v778 + 127;
  const size_t batch_v907[128] = {v812, v811, v810, v809, v808, v807, v839, v840, v869, v870, v871, v872, v873, v874, v875, v876, v877, v878, v879, v880, v881, v882, v883, v884, v885, v886, v841, v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v852, v853, v854, v904, v903, v902, v901, v900, v899, v898, v897, v896, v895, v894, v893, v892, v891, v890, v889, v888, v887, v855, v856, v857, v858, v859, v860, v861, v862, v863, v864, v865, v866, v867, v868, v806, v805, v837, v838, v804, v803, v802, v801, v800, v799, v798, v797, v796, v795, v794, v793, v792, v791, v790, v789, v788, v787, v786, v785, v784, v783, v782, v781, v780, v779, v906, v905, v816, v815, v836, v835, v834, v833, v832, v831, v830, v829, v828, v827, v826, v825, v824, v823, v822, v821, v820, v819, v818, v817, v814, v813};
  size_t v907 = lwe_create_batch(batch_v907, 128);
  return v907;
}


int main () {
    printf("add_round_key test...\n");
    
    host_ntt_struct_initialize();
    if (device_multi_cmux_initialize(128)) {
        fprintf(stderr, "Failed to initialize the CMUX module.\n");
        return 1;
    }
    const size_t index_key = lwe_bin_new_sk();
    if (index_key == 0) {
        std::cerr << "Failed to generate the secret key." << std::endl;
        return 1;
    }
    if (lwe_bin_generate_bsk(index_key)) {
        std::cerr << "Failed to generate the bootstrapping key." << std::endl;
        return 1;
    }
    
    const __uint128_t message_1 = 1;
    const __uint128_t message_2 = 2;
    const size_t index_cipher_1 = lwe_bin_encrypt(message_1 & 1, index_key);
    for (unsigned int i = 1; i < 128; ++i) {
        lwe_bin_encrypt((message_1 >> i) & 1, index_key);
    }
    const size_t index_cipher_2 = lwe_bin_encrypt(message_2 & 1, index_key);
    for (unsigned int i = 1; i < 128; ++i) {
        lwe_bin_encrypt((message_2 >> i) & 1, index_key);
    }

    std::cout << "Keys and ciphers generated, starting the main computation" << std::endl;
    time_t begin = time(NULL);
    size_t index_cipher_3 = cipher_2;
    for (unsigned int i = 0; i < N_RUNS; ++i)
        index_cipher_3 = add_round_key(index_cipher_1, index_cipher_3);
    }
    time_t end = time(NULL);
    std::cout << "Main computation done" << std::endl;
    
    const uint_t decrypted = lwe_bin_decrypt(index_cipher_3, index_key);
    
    std::cout << "Low 64 bits of the result: " << static_cast<uint64_t>(decrypted) << std::endl;
    
    double total_time = difftime(end, begin);
    std::cout << "Runtime: " << total_time << "s" << std::endl;

    device_cmux_reset();
    return 0;
}
